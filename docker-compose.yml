version: '3.7'

services:
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    networks:
      - app_network
    ports:
      - 5432:5432
    volumes:
      - type: bind
        source: ./postgres/data/
        target: /var/lib/postgresql/data
    environment:
      PGPASSWORD: ${PGPASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  redis:
    container_name: redis
    image: redis:5-alpine
    restart: always
    networks:
      - app_network
    ports:
      - 6379:6379
    volumes:
      - type: bind
        source: ./redis/data/
        target: /data

  nginx:
    container_name: react
    image: nginx
    depends_on:
      - flask
    # restart: unless-stopped
    networks:
      - app_network
    ports:
      - 8080:80
    volumes:
      - type: bind
        source: ./configurations/nginx.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ./xample/client/webapp/build/
        target: /var/www/html

  flask:
    container_name: flask
    build: 
      context: ./xample/server
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    networks:
      - app_network
    ports:
      - 1000:80
    volumes:
      - type: bind
        source: ./storage/
        target: /usr/src/storage
      - type: bind
        source: ./xample/server/
        target: /usr/src/flask
    env_file:
      - .env
      - ./xample/server/.env.server

  business:
    container_name: business
    build:
      context: ./xample/business
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
      - flask
    networks:
      - app_network
    ports:
      - 2000:80
    volumes:
      - type: bind
        source: ./xample/business/
        target: /app/src
    env_file:
      - .env
      - ./xample/business/.env.business

networks:
  app_network:
    name: app-network
    driver: bridge
